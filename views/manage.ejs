<!DOCTYPE html>
<html>

<head>
    <title>Leaflet Map with Route</title>
    <link rel="stylesheet" href="/input.css" type="text/css">
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.6.0/dist/leaflet.css" />
    <link rel="stylesheet" href="https://unpkg.com/leaflet-routing-machine@latest/dist/leaflet-routing-machine.css" />
    <style>
        body {
            margin: 0;
            padding: 0;
            display: grid;
            grid-template-columns: 2fr 3fr;
            grid-template-rows: 1fr 1fr;
            position: fixed;
            height: 100%;
            width: 100%;
        }

        #map {
            height: 100%;
            grid-row: span 2;
            width: 100%;
        }
    </style>
</head>

<body>
    <div id="db1" style="overflow: scroll; height:100%">
        <table border="1">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Von Ort</th>
                    <th>Von Strasse</th>
                    <th>Bis Ort</th>
                    <th>Bis Strasse</th>
                    <th>Transport Art</th>
                    <th>Termin Zeit</th>
                </tr>
            </thead>
            <tbody>
                <% termins.forEach(function(termin) { %>
                    <tr>
                        <td>
                            <%= termin.name %>
                        </td>
                        <td>
                            <%= termin.vonOrt %>
                        </td>
                        <td>
                            <%= termin.vonStrasse %>
                        </td>
                        <td>
                            <%= termin.bisOrt %>
                        </td>
                        <td>
                            <%= termin.bisStrasse %>
                        </td>
                        <td>
                            <%= termin.transportArt %>
                        </td>
                        <td>
                            <%= new Date(termin.terminZeit).toLocaleString() %>
                        </td>
                    </tr>
                    <% }); %>
            </tbody>
        </table>
    </div>
    <div id="map" style="grid-auto-columns: 2;"></div>
    <div id="db2" style="overflow: scroll; height:100%">
        <div>
            <input type="text" id="tripIdInput" placeholder="Gib eine Trip-ID ein">
            <button id="fetchTripsButton">Trips laden</button>
        </div>
        
        <table>
            <thead>
                <tr>
                    <th>Transport ID</th>
                    <th>Transport Art</th>
                    <th>Von Ort</th>
                    <th>Von Straße</th>
                    <th>Zeit Abfahrt</th>
                    <th>Bis Ort</th>
                    <th>Bis Straße</th>
                    <th>Zeit Ankunft</th>
                </tr>
            </thead>
            <tbody>
                <% trips.forEach(function(path) { %>
                    <% path.bookings.forEach(function(booking) { %>
                        <tr>
                            <td>
                                <%= path._id %>
                            </td> <!-- Assuming Transport ID is the path _id -->
                            <td>
                                <%= path.type %>
                            </td>
                            <td>
                                <%= booking.vonOrt %>
                            </td>
                            <td>
                                <%= booking.vonStrasse %>
                            </td>
                            <td>
                                <%= new Date(booking.vonZeit).toLocaleString() %>
                            </td>
                            <td>
                                <%= booking.bisOrt %>
                            </td>
                            <td>
                                <%= booking.bisStrasse %>
                            </td>
                            <td>
                                <%= new Date(booking.bisZeit).toLocaleString() %>
                            </td>
                        </tr>
                        <% }); %>
                            <% }); %>
            </tbody>
        </table>
    </div>
    <script src="https://unpkg.com/leaflet@1.6.0/dist/leaflet.js"></script>
    <script src="https://unpkg.com/leaflet-routing-machine@latest/dist/leaflet-routing-machine.js"></script>

    <script>
        async function fetchFilteredTrips(id) {
            try {
                const response = await fetch('/calculated-db/filter', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ id }) // Send `id` value in request body
                });

                if (response.ok) {
                    const trips = await response.json();
                    console.log(trips); // Log the trips array for debugging

                    const stopList = [];
                    const waypoints = [];

                    // Loop through each trip and its bookings
                    trips.forEach(trip => {
                        trip.bookings.forEach(booking => {
                            // Add "from" stop
                            const fromStop = `${booking.vonOrt} ${booking.vonStrasse}`;
                            stopList.push(fromStop);

                            // Add "to" stop (destination)
                            const toStop = `${booking.bisOrt} ${booking.bisStrasse}`;
                            stopList.push(toStop);
                        });
                    });

                    // For each address in stopList, fetch the coordinates
                    for (const address of stopList) {
                        const coordinates = await getCoordinates(address);
                        if (coordinates) {
                            // Convert the coordinates to L.latLng format and push to waypoints array
                            waypoints.push(L.latLng(coordinates.lat, coordinates.lng));
                        }
                    }

                    console.log(waypoints); // List of waypoints in L.latLng format
                    return waypoints;
                } else {
                    console.error('No trips found with the specified ID');
                }
            } catch (error) {
                console.error('Error fetching filtered trips:', error);
            }
        }

        // Helper function to get coordinates from Google Maps Geocoding API
        async function getCoordinates(address) {
            try {
                const apiKey = 'AIzaSyCDMKFjMo4YMZACLXb4cmLqUgfsJvbOUdQ';
                const url = `https://maps.googleapis.com/maps/api/geocode/json?address=${encodeURIComponent(address)}&key=${apiKey}`;

                const response = await fetch(url);
                const data = await response.json();

                if (data.status === 'OK') {
                    const location = data.results[0].geometry.location;
                    return { lat: location.lat, lng: location.lng };
                } else {
                    console.error(`Geocode failed for address: ${address}`);
                    return null;
                }
            } catch (error) {
                console.error(`Error fetching coordinates for address ${address}:`, error);
                return null;
            }
        }

        // Main function to initialize the map and load waypoints
        async function initializeMap() {
            // Get the waypoints by calling the async fetchFilteredTrips function
            const waypoints = await fetchFilteredTrips("672f5d16032f54f095034854");

            // Ensure that the waypoints have been retrieved before initializing the map
            if (waypoints.length > 0) {
                // Initialize the map and set the view to a default location (you can adjust this as needed)
                const map = L.map('map').setView([35.6897, 139.6922], 10); // Example: Tokyo

                // Add the tile layer (OpenStreetMap)
                L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                    attribution: '© OpenStreetMap contributors'
                }).addTo(map);

                // Create the routing control with the fetched waypoints
                L.Routing.control({
                    waypoints: waypoints,
                    routeWhileDragging: true
                }).addTo(map);
            } else {
                console.error("No waypoints found.");
            }
        }

        // Call the initializeMap function to start the process
        initializeMap();
    </script>

    <script>
        document.getElementById('fetchTripsButton').addEventListener('click', async () => {
            const tripId = document.getElementById('tripIdInput').value;

            if (tripId) {
                // Wenn eine ID eingegeben wurde, rufe fetchFilteredTrips auf
                const waypoints = await fetchFilteredTrips(tripId);

                // Füge den Code hinzu, um die Waypoints auf der Karte zu setzen
                if (waypoints && waypoints.length > 0) {
                    var map = L.map('map').setView([waypoints[0].lat, waypoints[0].lng], 10); // Initialisiere die Karte auf den ersten Waypoint

                    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                        attribution: '© OpenStreetMap contributors'
                    }).addTo(map);

                    L.Routing.control({
                        waypoints: waypoints,
                        routeWhileDragging: true
                    }).addTo(map);
                }
            } else {
                alert('Bitte eine gültige Trip-ID eingeben!');
            }
        });

    </script>
</body>

</html>